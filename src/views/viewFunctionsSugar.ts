// This file is auto-generated by parseViewFunctions.ts. Do not edit manually.
import type { ViewArgs } from "../types/clientPayloads";

/**
 * Sugar for transactionFee_systemFeesCollected
 * @returns ViewArgs
 */
export function transactionFee_systemFeesCollected(): ViewArgs {
  return {
    payload: {
      function: "0x1::transaction_fee::system_fees_collected",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for account_existsAt
 * @param addr address
 * @returns ViewArgs
 */
export function account_existsAt(addr: string): ViewArgs {
  return {
    payload: {
      function: "0x1::account::exists_at",
      functionArguments: [addr],
    },
  };
}

/**
 * Sugar for account_isTombstone
 * @param addr address
 * @returns ViewArgs
 */
export function account_isTombstone(addr: string): ViewArgs {
  return {
    payload: {
      function: "0x1::account::is_tombstone",
      functionArguments: [addr],
    },
  };
}

/**
 * Sugar for account_getGuidNextCreationNum
 * @param addr address
 * @returns ViewArgs
 */
export function account_getGuidNextCreationNum(addr: string): ViewArgs {
  return {
    payload: {
      function: "0x1::account::get_guid_next_creation_num",
      functionArguments: [addr],
    },
  };
}

/**
 * Sugar for account_getSequenceNumber
 * @param addr address
 * @returns ViewArgs
 */
export function account_getSequenceNumber(addr: string): ViewArgs {
  return {
    payload: {
      function: "0x1::account::get_sequence_number",
      functionArguments: [addr],
    },
  };
}

/**
 * Sugar for account_getAuthenticationKey
 * @param addr address
 * @returns ViewArgs
 */
export function account_getAuthenticationKey(addr: string): ViewArgs {
  return {
    payload: {
      function: "0x1::account::get_authentication_key",
      functionArguments: [addr],
    },
  };
}

/**
 * Sugar for account_isSignerCapabilityOffered
 * @param account_addr address
 * @returns ViewArgs
 */
export function account_isSignerCapabilityOffered(account_addr: string): ViewArgs {
  return {
    payload: {
      function: "0x1::account::is_signer_capability_offered",
      functionArguments: [account_addr],
    },
  };
}

/**
 * Sugar for account_getSignerCapabilityOfferFor
 * @param account_addr address
 * @returns ViewArgs
 */
export function account_getSignerCapabilityOfferFor(account_addr: string): ViewArgs {
  return {
    payload: {
      function: "0x1::account::get_signer_capability_offer_for",
      functionArguments: [account_addr],
    },
  };
}

/**
 * Sugar for account_getOriginatingAddress
 * @param curr_auth_key address
 * @returns ViewArgs
 */
export function account_getOriginatingAddress(curr_auth_key: string): ViewArgs {
  return {
    payload: {
      function: "0x1::account::get_originating_address",
      functionArguments: [curr_auth_key],
    },
  };
}

/**
 * Sugar for reconfiguration_getCurrentEpoch
 * @returns ViewArgs
 */
export function reconfiguration_getCurrentEpoch(): ViewArgs {
  return {
    payload: {
      function: "0x1::reconfiguration::get_current_epoch",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for turnoutTally_getThresholdFromTurnout
 * @param voters u64
 * @param max_votes u64
 * @returns ViewArgs
 */
export function turnoutTally_getThresholdFromTurnout(voters: number, max_votes: number): ViewArgs {
  return {
    payload: {
      function: "0x1::turnout_tally::get_threshold_from_turnout",
      functionArguments: [voters, max_votes],
    },
  };
}

/**
 * Sugar for voteReceipt_getVoteReceipt
 * @param user_addr address
 * @param idx u64
 * @returns ViewArgs
 */
export function voteReceipt_getVoteReceipt(user_addr: string, idx: number): ViewArgs {
  return {
    payload: {
      function: "0x1::vote_receipt::get_vote_receipt",
      functionArguments: [user_addr, idx],
    },
  };
}

/**
 * Sugar for feeMaker_getFeeMakers
 * @returns ViewArgs
 */
export function feeMaker_getFeeMakers(): ViewArgs {
  return {
    payload: {
      function: "0x1::fee_maker::get_fee_makers",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for feeMaker_getUserFeesMade
 * @param account address
 * @returns ViewArgs
 */
export function feeMaker_getUserFeesMade(account: string): ViewArgs {
  return {
    payload: {
      function: "0x1::fee_maker::get_user_fees_made",
      functionArguments: [account],
    },
  };
}

/**
 * Sugar for feeMaker_getAllFeesMade
 * @returns ViewArgs
 */
export function feeMaker_getAllFeesMade(): ViewArgs {
  return {
    payload: {
      function: "0x1::fee_maker::get_all_fees_made",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for recoveryMode_isRecoveryMode
 * @returns ViewArgs
 */
export function recoveryMode_isRecoveryMode(): ViewArgs {
  return {
    payload: {
      function: "0x1::recovery_mode::is_recovery_mode",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for sacredCows_getSlowDripConst
 * @returns ViewArgs
 */
export function sacredCows_getSlowDripConst(): ViewArgs {
  return {
    payload: {
      function: "0x1::sacred_cows::get_slow_drip_const",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for globals_getCoinScalingFactor
 * @returns ViewArgs
 */
export function globals_getCoinScalingFactor(): ViewArgs {
  return {
    payload: {
      function: "0x1::globals::get_coin_scaling_factor",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for validatorUniverse_getEligibleValidators
 * @returns ViewArgs
 */
export function validatorUniverse_getEligibleValidators(): ViewArgs {
  return {
    payload: {
      function: "0x1::validator_universe::get_eligible_validators",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for validatorUniverse_isInUniverse
 * @param addr address
 * @returns ViewArgs
 */
export function validatorUniverse_isInUniverse(addr: string): ViewArgs {
  return {
    payload: {
      function: "0x1::validator_universe::is_in_universe",
      functionArguments: [addr],
    },
  };
}

/**
 * Sugar for migrations_getLastMigrationNumber
 * @returns ViewArgs
 */
export function migrations_getLastMigrationNumber(): ViewArgs {
  return {
    payload: {
      function: "0x1::migrations::get_last_migration_number",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for migrations_getLastMigrationsHistory
 * @returns ViewArgs
 */
export function migrations_getLastMigrationsHistory(): ViewArgs {
  return {
    payload: {
      function: "0x1::migrations::get_last_migrations_history",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for donorVoiceGovernance_checkIsDonor
 * @param dv_account address
 * @param user address
 * @returns ViewArgs
 */
export function donorVoiceGovernance_checkIsDonor(dv_account: string, user: string): ViewArgs {
  return {
    payload: {
      function: "0x1::donor_voice_governance::check_is_donor",
      functionArguments: [dv_account, user],
    },
  };
}

/**
 * Sugar for donorVoiceGovernance_getUserDonations
 * @param dv_account address
 * @param user address
 * @returns ViewArgs
 */
export function donorVoiceGovernance_getUserDonations(dv_account: string, user: string): ViewArgs {
  return {
    payload: {
      function: "0x1::donor_voice_governance::get_user_donations",
      functionArguments: [dv_account, user],
    },
  };
}

/**
 * Sugar for donorVoiceGovernance_getVetoBallots
 * @param dv_account address
 * @returns ViewArgs
 */
export function donorVoiceGovernance_getVetoBallots(dv_account: string): ViewArgs {
  return {
    payload: {
      function: "0x1::donor_voice_governance::get_veto_ballots",
      functionArguments: [dv_account],
    },
  };
}

/**
 * Sugar for donorVoiceGovernance_txHasVetoPending
 * @param dv_account address
 * @param tx_id u64
 * @returns ViewArgs
 */
export function donorVoiceGovernance_txHasVetoPending(dv_account: string, tx_id: number): ViewArgs {
  return {
    payload: {
      function: "0x1::donor_voice_governance::tx_has_veto_pending",
      functionArguments: [dv_account, tx_id],
    },
  };
}

/**
 * Sugar for donorVoiceGovernance_getVetoDeadline
 * @param dv_account address
 * @param tx_id u64
 * @returns ViewArgs
 */
export function donorVoiceGovernance_getVetoDeadline(dv_account: string, tx_id: number): ViewArgs {
  return {
    payload: {
      function: "0x1::donor_voice_governance::get_veto_deadline",
      functionArguments: [dv_account, tx_id],
    },
  };
}

/**
 * Sugar for donorVoiceGovernance_getVetoTally
 * @param dv_account address
 * @param ballot_id u64
 * @returns ViewArgs
 */
export function donorVoiceGovernance_getVetoTally(dv_account: string, ballot_id: number): ViewArgs {
  return {
    payload: {
      function: "0x1::donor_voice_governance::get_veto_tally",
      functionArguments: [dv_account, ballot_id],
    },
  };
}

/**
 * Sugar for donorVoiceGovernance_getReauthBallots
 * @param dv_account address
 * @returns ViewArgs
 */
export function donorVoiceGovernance_getReauthBallots(dv_account: string): ViewArgs {
  return {
    payload: {
      function: "0x1::donor_voice_governance::get_reauth_ballots",
      functionArguments: [dv_account],
    },
  };
}

/**
 * Sugar for donorVoiceGovernance_getProposedReauthBallot
 * @param dv_account address
 * @returns ViewArgs
 */
export function donorVoiceGovernance_getProposedReauthBallot(dv_account: string): ViewArgs {
  return {
    payload: {
      function: "0x1::donor_voice_governance::get_proposed_reauth_ballot",
      functionArguments: [dv_account],
    },
  };
}

/**
 * Sugar for donorVoiceGovernance_isReauthProposed
 * @param dv_account address
 * @returns ViewArgs
 */
export function donorVoiceGovernance_isReauthProposed(dv_account: string): ViewArgs {
  return {
    payload: {
      function: "0x1::donor_voice_governance::is_reauth_proposed",
      functionArguments: [dv_account],
    },
  };
}

/**
 * Sugar for donorVoiceGovernance_getReauthTally
 * @param dv_account address
 * @param ballot_id u64
 * @returns ViewArgs
 */
export function donorVoiceGovernance_getReauthTally(dv_account: string, ballot_id: number): ViewArgs {
  return {
    payload: {
      function: "0x1::donor_voice_governance::get_reauth_tally",
      functionArguments: [dv_account, ballot_id],
    },
  };
}

/**
 * Sugar for donorVoiceGovernance_getReauthExpiry
 * @param dv_account address
 * @returns ViewArgs
 */
export function donorVoiceGovernance_getReauthExpiry(dv_account: string): ViewArgs {
  return {
    payload: {
      function: "0x1::donor_voice_governance::get_reauth_expiry",
      functionArguments: [dv_account],
    },
  };
}

/**
 * Sugar for donorVoiceGovernance_reauthWouldPass
 * @param dv_account address
 * @param ballot_id u64
 * @returns ViewArgs
 */
export function donorVoiceGovernance_reauthWouldPass(dv_account: string, ballot_id: number): ViewArgs {
  return {
    payload: {
      function: "0x1::donor_voice_governance::reauth_would_pass",
      functionArguments: [dv_account, ballot_id],
    },
  };
}

/**
 * Sugar for donorVoiceGovernance_getLiquidationBallots
 * @param dv_account address
 * @returns ViewArgs
 */
export function donorVoiceGovernance_getLiquidationBallots(dv_account: string): ViewArgs {
  return {
    payload: {
      function: "0x1::donor_voice_governance::get_liquidation_ballots",
      functionArguments: [dv_account],
    },
  };
}

/**
 * Sugar for donorVoiceGovernance_isLiquidationProposed
 * @param dv_account address
 * @returns ViewArgs
 */
export function donorVoiceGovernance_isLiquidationProposed(dv_account: string): ViewArgs {
  return {
    payload: {
      function: "0x1::donor_voice_governance::is_liquidation_proposed",
      functionArguments: [dv_account],
    },
  };
}

/**
 * Sugar for donorVoiceGovernance_getLiquidationTally
 * @param dv_account address
 * @param id u64
 * @returns ViewArgs
 */
export function donorVoiceGovernance_getLiquidationTally(dv_account: string, id: number): ViewArgs {
  return {
    payload: {
      function: "0x1::donor_voice_governance::get_liquidation_tally",
      functionArguments: [dv_account, id],
    },
  };
}

/**
 * Sugar for donorVoiceGovernance_getLiquidationDeadline
 * @param dv_account address
 * @returns ViewArgs
 */
export function donorVoiceGovernance_getLiquidationDeadline(dv_account: string): ViewArgs {
  return {
    payload: {
      function: "0x1::donor_voice_governance::get_liquidation_deadline",
      functionArguments: [dv_account],
    },
  };
}

/**
 * Sugar for epochHelper_getCurrentEpoch
 * @returns ViewArgs
 */
export function epochHelper_getCurrentEpoch(): ViewArgs {
  return {
    payload: {
      function: "0x1::epoch_helper::get_current_epoch",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for pledgeAccounts_getUserPledgeAmount
 * @param account address
 * @param address_of_beneficiary address
 * @returns ViewArgs
 */
export function pledgeAccounts_getUserPledgeAmount(account: string, address_of_beneficiary: string): ViewArgs {
  return {
    payload: {
      function: "0x1::pledge_accounts::get_user_pledge_amount",
      functionArguments: [account, address_of_beneficiary],
    },
  };
}

/**
 * Sugar for pledgeAccounts_getAvailableToBeneficiary
 * @param bene address
 * @returns ViewArgs
 */
export function pledgeAccounts_getAvailableToBeneficiary(bene: string): ViewArgs {
  return {
    payload: {
      function: "0x1::pledge_accounts::get_available_to_beneficiary",
      functionArguments: [bene],
    },
  };
}

/**
 * Sugar for pledgeAccounts_getLifetimeToBeneficiary
 * @param bene address
 * @returns ViewArgs
 */
export function pledgeAccounts_getLifetimeToBeneficiary(bene: string): ViewArgs {
  return {
    payload: {
      function: "0x1::pledge_accounts::get_lifetime_to_beneficiary",
      functionArguments: [bene],
    },
  };
}

/**
 * Sugar for pledgeAccounts_getAllPledgers
 * @param bene address
 * @returns ViewArgs
 */
export function pledgeAccounts_getAllPledgers(bene: string): ViewArgs {
  return {
    payload: {
      function: "0x1::pledge_accounts::get_all_pledgers",
      functionArguments: [bene],
    },
  };
}

/**
 * Sugar for pledgeAccounts_getRevokeVote
 * @param bene address
 * @returns ViewArgs
 */
export function pledgeAccounts_getRevokeVote(bene: string): ViewArgs {
  return {
    payload: {
      function: "0x1::pledge_accounts::get_revoke_vote",
      functionArguments: [bene],
    },
  };
}

/**
 * Sugar for pledgeAccounts_getPledgeSupply
 * @returns ViewArgs
 */
export function pledgeAccounts_getPledgeSupply(): ViewArgs {
  return {
    payload: {
      function: "0x1::pledge_accounts::get_pledge_supply",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for demo_getMessage
 * @param addr address
 * @returns ViewArgs
 */
export function demo_getMessage(addr: string): ViewArgs {
  return {
    payload: {
      function: "0x1::demo::get_message",
      functionArguments: [addr],
    },
  };
}

/**
 * Sugar for epochBoundary_canTrigger
 * @returns ViewArgs
 */
export function epochBoundary_canTrigger(): ViewArgs {
  return {
    payload: {
      function: "0x1::epoch_boundary::can_trigger",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for epochBoundary_getReconfigSuccess
 * @returns ViewArgs
 */
export function epochBoundary_getReconfigSuccess(): ViewArgs {
  return {
    payload: {
      function: "0x1::epoch_boundary::get_reconfig_success",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for epochBoundary_getActualVals
 * @returns ViewArgs
 */
export function epochBoundary_getActualVals(): ViewArgs {
  return {
    payload: {
      function: "0x1::epoch_boundary::get_actual_vals",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for epochBoundary_getQualifiedBidders
 * @returns ViewArgs
 */
export function epochBoundary_getQualifiedBidders(): ViewArgs {
  return {
    payload: {
      function: "0x1::epoch_boundary::get_qualified_bidders",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for epochBoundary_getAuctionWinners
 * @returns ViewArgs
 */
export function epochBoundary_getAuctionWinners(): ViewArgs {
  return {
    payload: {
      function: "0x1::epoch_boundary::get_auction_winners",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for epochBoundary_getMaxSeatsOffered
 * @returns ViewArgs
 */
export function epochBoundary_getMaxSeatsOffered(): ViewArgs {
  return {
    payload: {
      function: "0x1::epoch_boundary::get_max_seats_offered",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for epochBoundary_getFilledSeats
 * @returns ViewArgs
 */
export function epochBoundary_getFilledSeats(): ViewArgs {
  return {
    payload: {
      function: "0x1::epoch_boundary::get_filled_seats",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for vouch_isInit
 * @param acc address
 * @returns ViewArgs
 */
export function vouch_isInit(acc: string): ViewArgs {
  return {
    payload: {
      function: "0x1::vouch::is_init",
      functionArguments: [acc],
    },
  };
}

/**
 * Sugar for vouch_getReceivedVouches
 * @param acc address
 * @returns ViewArgs
 */
export function vouch_getReceivedVouches(acc: string): ViewArgs {
  return {
    payload: {
      function: "0x1::vouch::get_received_vouches",
      functionArguments: [acc],
    },
  };
}

/**
 * Sugar for vouch_getGivenVouches
 * @param acc address
 * @returns ViewArgs
 */
export function vouch_getGivenVouches(acc: string): ViewArgs {
  return {
    payload: {
      function: "0x1::vouch::get_given_vouches",
      functionArguments: [acc],
    },
  };
}

/**
 * Sugar for vouch_getVouchPrice
 * @returns ViewArgs
 */
export function vouch_getVouchPrice(): ViewArgs {
  return {
    payload: {
      function: "0x1::vouch::get_vouch_price",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for vouch_allVouchers
 * @param val address
 * @returns ViewArgs
 */
export function vouch_allVouchers(val: string): ViewArgs {
  return {
    payload: {
      function: "0x1::vouch::all_vouchers",
      functionArguments: [val],
    },
  };
}

/**
 * Sugar for vouch_allNotExpired
 * @param addr address
 * @returns ViewArgs
 */
export function vouch_allNotExpired(addr: string): ViewArgs {
  return {
    payload: {
      function: "0x1::vouch::all_not_expired",
      functionArguments: [addr],
    },
  };
}

/**
 * Sugar for vouch_getReceivedVouchesNotExpired
 * @param addr address
 * @returns ViewArgs
 */
export function vouch_getReceivedVouchesNotExpired(addr: string): ViewArgs {
  return {
    payload: {
      function: "0x1::vouch::get_received_vouches_not_expired",
      functionArguments: [addr],
    },
  };
}

/**
 * Sugar for vouch_getGivenVouchesNotExpired
 * @param addr address
 * @returns ViewArgs
 */
export function vouch_getGivenVouchesNotExpired(addr: string): ViewArgs {
  return {
    payload: {
      function: "0x1::vouch::get_given_vouches_not_expired",
      functionArguments: [addr],
    },
  };
}

/**
 * Sugar for vouch_getGivenThisEpoch
 * @param addr address
 * @returns ViewArgs
 */
export function vouch_getGivenThisEpoch(addr: string): ViewArgs {
  return {
    payload: {
      function: "0x1::vouch::get_given_this_epoch",
      functionArguments: [addr],
    },
  };
}

/**
 * Sugar for vouch_trueFriends
 * @param addr address
 * @returns ViewArgs
 */
export function vouch_trueFriends(addr: string): ViewArgs {
  return {
    payload: {
      function: "0x1::vouch::true_friends",
      functionArguments: [addr],
    },
  };
}

/**
 * Sugar for vouch_isValidVoucherFor
 * @param voucher address
 * @param recipient address
 * @returns ViewArgs
 */
export function vouch_isValidVoucherFor(voucher: string, recipient: string): ViewArgs {
  return {
    payload: {
      function: "0x1::vouch::is_valid_voucher_for",
      functionArguments: [voucher, recipient],
    },
  };
}

/**
 * Sugar for vouch_getLastRevocationEpoch
 * @param addr address
 * @returns ViewArgs
 */
export function vouch_getLastRevocationEpoch(addr: string): ViewArgs {
  return {
    payload: {
      function: "0x1::vouch::get_last_revocation_epoch",
      functionArguments: [addr],
    },
  };
}

/**
 * Sugar for vouch_getRevocationsThisEpoch
 * @param addr address
 * @returns ViewArgs
 */
export function vouch_getRevocationsThisEpoch(addr: string): ViewArgs {
  return {
    payload: {
      function: "0x1::vouch::get_revocations_this_epoch",
      functionArguments: [addr],
    },
  };
}

/**
 * Sugar for rootOfTrust_isInitialized
 * @param registry address
 * @returns ViewArgs
 */
export function rootOfTrust_isInitialized(registry: string): ViewArgs {
  return {
    payload: {
      function: "0x1::root_of_trust::is_initialized",
      functionArguments: [registry],
    },
  };
}

/**
 * Sugar for rootOfTrust_getCurrentRootsAtRegistry
 * @param registry address
 * @returns ViewArgs
 */
export function rootOfTrust_getCurrentRootsAtRegistry(registry: string): ViewArgs {
  return {
    payload: {
      function: "0x1::root_of_trust::get_current_roots_at_registry",
      functionArguments: [registry],
    },
  };
}

/**
 * Sugar for rootOfTrust_isRootAtRegistry
 * @param registry address
 * @param account address
 * @returns ViewArgs
 */
export function rootOfTrust_isRootAtRegistry(registry: string, account: string): ViewArgs {
  return {
    payload: {
      function: "0x1::root_of_trust::is_root_at_registry",
      functionArguments: [registry, account],
    },
  };
}

/**
 * Sugar for rootOfTrust_canRotate
 * @param registry address
 * @returns ViewArgs
 */
export function rootOfTrust_canRotate(registry: string): ViewArgs {
  return {
    payload: {
      function: "0x1::root_of_trust::can_rotate",
      functionArguments: [registry],
    },
  };
}

/**
 * Sugar for rootOfTrust_genesisRoot
 * @returns ViewArgs
 */
export function rootOfTrust_genesisRoot(): ViewArgs {
  return {
    payload: {
      function: "0x1::root_of_trust::genesis_root",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for vouchLimits_calculateScoreLimit
 * @param grantor_acc address
 * @returns ViewArgs
 */
export function vouchLimits_calculateScoreLimit(grantor_acc: string): ViewArgs {
  return {
    payload: {
      function: "0x1::vouch_limits::calculate_score_limit",
      functionArguments: [grantor_acc],
    },
  };
}

/**
 * Sugar for vouchLimits_getVouchLimit
 * @param addr address
 * @returns ViewArgs
 */
export function vouchLimits_getVouchLimit(addr: string): ViewArgs {
  return {
    payload: {
      function: "0x1::vouch_limits::get_vouch_limit",
      functionArguments: [addr],
    },
  };
}

/**
 * Sugar for pageRankLazy_getCachedScore
 * @param addr address
 * @returns ViewArgs
 */
export function pageRankLazy_getCachedScore(addr: string): ViewArgs {
  return {
    payload: {
      function: "0x1::page_rank_lazy::get_cached_score",
      functionArguments: [addr],
    },
  };
}

/**
 * Sugar for pageRankLazy_isStale
 * @param addr address
 * @returns ViewArgs
 */
export function pageRankLazy_isStale(addr: string): ViewArgs {
  return {
    payload: {
      function: "0x1::page_rank_lazy::is_stale",
      functionArguments: [addr],
    },
  };
}

/**
 * Sugar for pageRankLazy_getMaxSingleScore
 * @returns ViewArgs
 */
export function pageRankLazy_getMaxSingleScore(): ViewArgs {
  return {
    payload: {
      function: "0x1::page_rank_lazy::get_max_single_score",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for slowWallet_isSlow
 * @param addr address
 * @returns ViewArgs
 */
export function slowWallet_isSlow(addr: string): ViewArgs {
  return {
    payload: {
      function: "0x1::slow_wallet::is_slow",
      functionArguments: [addr],
    },
  };
}

/**
 * Sugar for slowWallet_unlockedAmount
 * @param addr address
 * @returns ViewArgs
 */
export function slowWallet_unlockedAmount(addr: string): ViewArgs {
  return {
    payload: {
      function: "0x1::slow_wallet::unlocked_amount",
      functionArguments: [addr],
    },
  };
}

/**
 * Sugar for slowWallet_transferredAmount
 * @param addr address
 * @returns ViewArgs
 */
export function slowWallet_transferredAmount(addr: string): ViewArgs {
  return {
    payload: {
      function: "0x1::slow_wallet::transferred_amount",
      functionArguments: [addr],
    },
  };
}

/**
 * Sugar for slowWallet_getSlowList
 * @returns ViewArgs
 */
export function slowWallet_getSlowList(): ViewArgs {
  return {
    payload: {
      function: "0x1::slow_wallet::get_slow_list",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for slowWallet_slowWalletsToUnlock
 * @returns ViewArgs
 */
export function slowWallet_slowWalletsToUnlock(): ViewArgs {
  return {
    payload: {
      function: "0x1::slow_wallet::slow_wallets_to_unlock",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for slowWallet_getLockedSupply
 * @returns ViewArgs
 */
export function slowWallet_getLockedSupply(): ViewArgs {
  return {
    payload: {
      function: "0x1::slow_wallet::get_locked_supply",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for slowWallet_getLifetimeUnlockedSupply
 * @returns ViewArgs
 */
export function slowWallet_getLifetimeUnlockedSupply(): ViewArgs {
  return {
    payload: {
      function: "0x1::slow_wallet::get_lifetime_unlocked_supply",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for slowWallet_getSlowSupply
 * @returns ViewArgs
 */
export function slowWallet_getSlowSupply(): ViewArgs {
  return {
    payload: {
      function: "0x1::slow_wallet::get_slow_supply",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for activity_getLastActivityUsecs
 * @param user address
 * @returns ViewArgs
 */
export function activity_getLastActivityUsecs(user: string): ViewArgs {
  return {
    payload: {
      function: "0x1::activity::get_last_activity_usecs",
      functionArguments: [user],
    },
  };
}

/**
 * Sugar for activity_hasEverBeenTouched
 * @param user address
 * @returns ViewArgs
 */
export function activity_hasEverBeenTouched(user: string): ViewArgs {
  return {
    payload: {
      function: "0x1::activity::has_ever_been_touched",
      functionArguments: [user],
    },
  };
}

/**
 * Sugar for activity_getLastTouchUsecs
 * @param user address
 * @returns ViewArgs
 */
export function activity_getLastTouchUsecs(user: string): ViewArgs {
  return {
    payload: {
      function: "0x1::activity::get_last_touch_usecs",
      functionArguments: [user],
    },
  };
}

/**
 * Sugar for activity_getOnboardingUsecs
 * @param user address
 * @returns ViewArgs
 */
export function activity_getOnboardingUsecs(user: string): ViewArgs {
  return {
    payload: {
      function: "0x1::activity::get_onboarding_usecs",
      functionArguments: [user],
    },
  };
}

/**
 * Sugar for activity_isInitialized
 * @param user address
 * @returns ViewArgs
 */
export function activity_isInitialized(user: string): ViewArgs {
  return {
    payload: {
      function: "0x1::activity::is_initialized",
      functionArguments: [user],
    },
  };
}

/**
 * Sugar for activity_isPreV8
 * @param user address
 * @returns ViewArgs
 */
export function activity_isPreV8(user: string): ViewArgs {
  return {
    payload: {
      function: "0x1::activity::is_pre_v8",
      functionArguments: [user],
    },
  };
}

/**
 * Sugar for activity_isPrehistoric
 * @param user address
 * @returns ViewArgs
 */
export function activity_isPrehistoric(user: string): ViewArgs {
  return {
    payload: {
      function: "0x1::activity::is_prehistoric",
      functionArguments: [user],
    },
  };
}

/**
 * Sugar for libraCoin_getFinalSupply
 * @returns ViewArgs
 */
export function libraCoin_getFinalSupply(): ViewArgs {
  return {
    payload: {
      function: "0x1::libra_coin::get_final_supply",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for libraCoin_supply
 * @returns ViewArgs
 */
export function libraCoin_supply(): ViewArgs {
  return {
    payload: {
      function: "0x1::libra_coin::supply",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for libraCoin_supply_128
 * @returns ViewArgs
 */
export function libraCoin_supply_128(): ViewArgs {
  return {
    payload: {
      function: "0x1::libra_coin::supply_128",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for burn_getLifetimeTracker
 * @returns ViewArgs
 */
export function burn_getLifetimeTracker(): ViewArgs {
  return {
    payload: {
      function: "0x1::burn::get_lifetime_tracker",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for supply_getStats
 * @returns ViewArgs
 */
export function supply_getStats(): ViewArgs {
  return {
    payload: {
      function: "0x1::supply::get_stats",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for communityWalletInit_checkProposedAuths
 * @param initial_authorities vector<address>
 * @param num_signatures u64
 * @returns ViewArgs
 */
export function communityWalletInit_checkProposedAuths(initial_authorities: string, num_signatures: number): ViewArgs {
  return {
    payload: {
      function: "0x1::community_wallet_init::check_proposed_auths",
      functionArguments: [initial_authorities, num_signatures],
    },
  };
}

/**
 * Sugar for communityWalletInit_qualifies
 * @param addr address
 * @returns ViewArgs
 */
export function communityWalletInit_qualifies(addr: string): ViewArgs {
  return {
    payload: {
      function: "0x1::community_wallet_init::qualifies",
      functionArguments: [addr],
    },
  };
}

/**
 * Sugar for communityWalletInit_getQualifying
 * @param opt_in_list vector<address>
 * @returns ViewArgs
 */
export function communityWalletInit_getQualifying(opt_in_list: string): ViewArgs {
  return {
    payload: {
      function: "0x1::community_wallet_init::get_qualifying",
      functionArguments: [opt_in_list],
    },
  };
}

/**
 * Sugar for communityWalletInit_getCommunityWalletAuthorities
 * @param multisig_address address
 * @returns ViewArgs
 */
export function communityWalletInit_getCommunityWalletAuthorities(multisig_address: string): ViewArgs {
  return {
    payload: {
      function: "0x1::community_wallet_init::get_community_wallet_authorities",
      functionArguments: [multisig_address],
    },
  };
}

/**
 * Sugar for jail_isJailed
 * @param validator address
 * @returns ViewArgs
 */
export function jail_isJailed(validator: string): ViewArgs {
  return {
    payload: {
      function: "0x1::jail::is_jailed",
      functionArguments: [validator],
    },
  };
}

/**
 * Sugar for jail_getJailReputation
 * @param addr address
 * @returns ViewArgs
 */
export function jail_getJailReputation(addr: string): ViewArgs {
  return {
    payload: {
      function: "0x1::jail::get_jail_reputation",
      functionArguments: [addr],
    },
  };
}

/**
 * Sugar for jail_getCountBuddiesJailed
 * @param addr address
 * @returns ViewArgs
 */
export function jail_getCountBuddiesJailed(addr: string): ViewArgs {
  return {
    payload: {
      function: "0x1::jail::get_count_buddies_jailed",
      functionArguments: [addr],
    },
  };
}

/**
 * Sugar for jail_existsJail
 * @param addr address
 * @returns ViewArgs
 */
export function jail_existsJail(addr: string): ViewArgs {
  return {
    payload: {
      function: "0x1::jail::exists_jail",
      functionArguments: [addr],
    },
  };
}

/**
 * Sugar for ancestry_getTree
 * @param addr address
 * @returns ViewArgs
 */
export function ancestry_getTree(addr: string): ViewArgs {
  return {
    payload: {
      function: "0x1::ancestry::get_tree",
      functionArguments: [addr],
    },
  };
}

/**
 * Sugar for ancestry_isInTree
 * @param ancestor address
 * @param user address
 * @returns ViewArgs
 */
export function ancestry_isInTree(ancestor: string, user: string): ViewArgs {
  return {
    payload: {
      function: "0x1::ancestry::is_in_tree",
      functionArguments: [ancestor, user],
    },
  };
}

/**
 * Sugar for ancestry_isFamily
 * @param left address
 * @param right address
 * @returns ViewArgs
 */
export function ancestry_isFamily(left: string, right: string): ViewArgs {
  return {
    payload: {
      function: "0x1::ancestry::is_family",
      functionArguments: [left, right],
    },
  };
}

/**
 * Sugar for grade_getValidatorGrade
 * @param val address
 * @returns ViewArgs
 */
export function grade_getValidatorGrade(val: string): ViewArgs {
  return {
    payload: {
      function: "0x1::grade::get_validator_grade",
      functionArguments: [val],
    },
  };
}

/**
 * Sugar for communityWalletAdvance_canWithdrawAmount
 * @param dv_account address
 * @param amount u64
 * @returns ViewArgs
 */
export function communityWalletAdvance_canWithdrawAmount(dv_account: string, amount: number): ViewArgs {
  return {
    payload: {
      function: "0x1::community_wallet_advance::can_withdraw_amount",
      functionArguments: [dv_account, amount],
    },
  };
}

/**
 * Sugar for communityWalletAdvance_isDelinquent
 * @param dv_account address
 * @returns ViewArgs
 */
export function communityWalletAdvance_isDelinquent(dv_account: string): ViewArgs {
  return {
    payload: {
      function: "0x1::community_wallet_advance::is_delinquent",
      functionArguments: [dv_account],
    },
  };
}

/**
 * Sugar for communityWalletAdvance_totalOutstandingBalance
 * @param account address
 * @returns ViewArgs
 */
export function communityWalletAdvance_totalOutstandingBalance(account: string): ViewArgs {
  return {
    payload: {
      function: "0x1::community_wallet_advance::total_outstanding_balance",
      functionArguments: [account],
    },
  };
}

/**
 * Sugar for communityWalletAdvance_totalCreditAvailable
 * @param dv_account address
 * @returns ViewArgs
 */
export function communityWalletAdvance_totalCreditAvailable(dv_account: string): ViewArgs {
  return {
    payload: {
      function: "0x1::community_wallet_advance::total_credit_available",
      functionArguments: [dv_account],
    },
  };
}

/**
 * Sugar for founder_isVoucherScoreValid
 * @param user address
 * @returns ViewArgs
 */
export function founder_isVoucherScoreValid(user: string): ViewArgs {
  return {
    payload: {
      function: "0x1::founder::is_voucher_score_valid",
      functionArguments: [user],
    },
  };
}

/**
 * Sugar for founder_isFounder
 * @param user address
 * @returns ViewArgs
 */
export function founder_isFounder(user: string): ViewArgs {
  return {
    payload: {
      function: "0x1::founder::is_founder",
      functionArguments: [user],
    },
  };
}

/**
 * Sugar for founder_hasFriends
 * @param user address
 * @returns ViewArgs
 */
export function founder_hasFriends(user: string): ViewArgs {
  return {
    payload: {
      function: "0x1::founder::has_friends",
      functionArguments: [user],
    },
  };
}

/**
 * Sugar for musicalChairs_getCurrentSeats
 * @returns ViewArgs
 */
export function musicalChairs_getCurrentSeats(): ViewArgs {
  return {
    payload: {
      function: "0x1::musical_chairs::get_current_seats",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for donorVoice_isDonorVoice
 * @param addr address
 * @returns ViewArgs
 */
export function donorVoice_isDonorVoice(addr: string): ViewArgs {
  return {
    payload: {
      function: "0x1::donor_voice::is_donor_voice",
      functionArguments: [addr],
    },
  };
}

/**
 * Sugar for donorVoice_getRootRegistry
 * @returns ViewArgs
 */
export function donorVoice_getRootRegistry(): ViewArgs {
  return {
    payload: {
      function: "0x1::donor_voice::get_root_registry",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for donorVoice_getLiquidationQueue
 * @returns ViewArgs
 */
export function donorVoice_getLiquidationQueue(): ViewArgs {
  return {
    payload: {
      function: "0x1::donor_voice::get_liquidation_queue",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for donorVoiceReauth_authorizationExpired
 * @param dv_account address
 * @returns ViewArgs
 */
export function donorVoiceReauth_authorizationExpired(dv_account: string): ViewArgs {
  return {
    payload: {
      function: "0x1::donor_voice_reauth::authorization_expired",
      functionArguments: [dv_account],
    },
  };
}

/**
 * Sugar for donorVoiceReauth_hasActivityInLastYear
 * @param dv_account address
 * @returns ViewArgs
 */
export function donorVoiceReauth_hasActivityInLastYear(dv_account: string): ViewArgs {
  return {
    payload: {
      function: "0x1::donor_voice_reauth::has_activity_in_last_year",
      functionArguments: [dv_account],
    },
  };
}

/**
 * Sugar for donorVoiceReauth_flaggedForReauthorization
 * @param dv_account address
 * @returns ViewArgs
 */
export function donorVoiceReauth_flaggedForReauthorization(dv_account: string): ViewArgs {
  return {
    payload: {
      function: "0x1::donor_voice_reauth::flagged_for_reauthorization",
      functionArguments: [dv_account],
    },
  };
}

/**
 * Sugar for donorVoiceReauth_isAuthorized
 * @param dv_account address
 * @returns ViewArgs
 */
export function donorVoiceReauth_isAuthorized(dv_account: string): ViewArgs {
  return {
    payload: {
      function: "0x1::donor_voice_reauth::is_authorized",
      functionArguments: [dv_account],
    },
  };
}

/**
 * Sugar for cumulativeDeposits_isInitCumuTracking
 * @param addr address
 * @returns ViewArgs
 */
export function cumulativeDeposits_isInitCumuTracking(addr: string): ViewArgs {
  return {
    payload: {
      function: "0x1::cumulative_deposits::is_init_cumu_tracking",
      functionArguments: [addr],
    },
  };
}

/**
 * Sugar for cumulativeDeposits_getDepositors
 * @param payee address
 * @returns ViewArgs
 */
export function cumulativeDeposits_getDepositors(payee: string): ViewArgs {
  return {
    payload: {
      function: "0x1::cumulative_deposits::get_depositors",
      functionArguments: [payee],
    },
  };
}

/**
 * Sugar for cumulativeDeposits_getCumulativeDeposits
 * @param addr address
 * @returns ViewArgs
 */
export function cumulativeDeposits_getCumulativeDeposits(addr: string): ViewArgs {
  return {
    payload: {
      function: "0x1::cumulative_deposits::get_cumulative_deposits",
      functionArguments: [addr],
    },
  };
}

/**
 * Sugar for cumulativeDeposits_getIndexCumuDeposits
 * @param addr address
 * @returns ViewArgs
 */
export function cumulativeDeposits_getIndexCumuDeposits(addr: string): ViewArgs {
  return {
    payload: {
      function: "0x1::cumulative_deposits::get_index_cumu_deposits",
      functionArguments: [addr],
    },
  };
}

/**
 * Sugar for olAccount_balance
 * @param addr address
 * @returns ViewArgs
 */
export function olAccount_balance(addr: string): ViewArgs {
  return {
    payload: {
      function: "0x1::ol_account::balance",
      functionArguments: [addr],
    },
  };
}

/**
 * Sugar for olAccount_realBalance
 * @param addr address
 * @returns ViewArgs
 */
export function olAccount_realBalance(addr: string): ViewArgs {
  return {
    payload: {
      function: "0x1::ol_account::real_balance",
      functionArguments: [addr],
    },
  };
}

/**
 * Sugar for olAccount_balanceHuman
 * @param owner address
 * @returns ViewArgs
 */
export function olAccount_balanceHuman(owner: string): ViewArgs {
  return {
    payload: {
      function: "0x1::ol_account::balance_human",
      functionArguments: [owner],
    },
  };
}

/**
 * Sugar for olAccount_scaleFromHuman
 * @param human u64
 * @returns ViewArgs
 */
export function olAccount_scaleFromHuman(human: number): ViewArgs {
  return {
    payload: {
      function: "0x1::ol_account::scale_from_human",
      functionArguments: [human],
    },
  };
}

/**
 * Sugar for olAccount_canReceiveDirectCoinTransfers
 * @param account address
 * @returns ViewArgs
 */
export function olAccount_canReceiveDirectCoinTransfers(account: string): ViewArgs {
  return {
    payload: {
      function: "0x1::ol_account::can_receive_direct_coin_transfers",
      functionArguments: [account],
    },
  };
}

/**
 * Sugar for olAccount_getBurnTracker
 * @param account address
 * @returns ViewArgs
 */
export function olAccount_getBurnTracker(account: string): ViewArgs {
  return {
    payload: {
      function: "0x1::ol_account::get_burn_tracker",
      functionArguments: [account],
    },
  };
}

/**
 * Sugar for donorVoiceTxs_votingEnum
 * @returns ViewArgs
 */
export function donorVoiceTxs_votingEnum(): ViewArgs {
  return {
    payload: {
      function: "0x1::donor_voice_txs::voting_enum",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for donorVoiceTxs_approvedEnum
 * @returns ViewArgs
 */
export function donorVoiceTxs_approvedEnum(): ViewArgs {
  return {
    payload: {
      function: "0x1::donor_voice_txs::approved_enum",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for donorVoiceTxs_rejectedEnum
 * @returns ViewArgs
 */
export function donorVoiceTxs_rejectedEnum(): ViewArgs {
  return {
    payload: {
      function: "0x1::donor_voice_txs::rejected_enum",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for donorVoiceTxs_scheduledEnum
 * @returns ViewArgs
 */
export function donorVoiceTxs_scheduledEnum(): ViewArgs {
  return {
    payload: {
      function: "0x1::donor_voice_txs::scheduled_enum",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for donorVoiceTxs_paidEnum
 * @returns ViewArgs
 */
export function donorVoiceTxs_paidEnum(): ViewArgs {
  return {
    payload: {
      function: "0x1::donor_voice_txs::paid_enum",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for donorVoiceTxs_vetoEnum
 * @returns ViewArgs
 */
export function donorVoiceTxs_vetoEnum(): ViewArgs {
  return {
    payload: {
      function: "0x1::donor_voice_txs::veto_enum",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for donorVoiceTxs_isDonorVoice
 * @param multisig_address address
 * @returns ViewArgs
 */
export function donorVoiceTxs_isDonorVoice(multisig_address: string): ViewArgs {
  return {
    payload: {
      function: "0x1::donor_voice_txs::is_donor_voice",
      functionArguments: [multisig_address],
    },
  };
}

/**
 * Sugar for donorVoiceTxs_getTxStatus
 * @param multisig_address address
 * @param tx_id u64
 * @returns ViewArgs
 */
export function donorVoiceTxs_getTxStatus(multisig_address: string, tx_id: number): ViewArgs {
  return {
    payload: {
      function: "0x1::donor_voice_txs::get_tx_status",
      functionArguments: [multisig_address, tx_id],
    },
  };
}

/**
 * Sugar for donorVoiceTxs_isVoting
 * @param donor_voice_address address
 * @param tx_id u64
 * @returns ViewArgs
 */
export function donorVoiceTxs_isVoting(donor_voice_address: string, tx_id: number): ViewArgs {
  return {
    payload: {
      function: "0x1::donor_voice_txs::is_voting",
      functionArguments: [donor_voice_address, tx_id],
    },
  };
}

/**
 * Sugar for donorVoiceTxs_isApproved
 * @param donor_voice_address address
 * @param tx_id u64
 * @returns ViewArgs
 */
export function donorVoiceTxs_isApproved(donor_voice_address: string, tx_id: number): ViewArgs {
  return {
    payload: {
      function: "0x1::donor_voice_txs::is_approved",
      functionArguments: [donor_voice_address, tx_id],
    },
  };
}

/**
 * Sugar for donorVoiceTxs_isRejected
 * @param donor_voice_address address
 * @param tx_id u64
 * @returns ViewArgs
 */
export function donorVoiceTxs_isRejected(donor_voice_address: string, tx_id: number): ViewArgs {
  return {
    payload: {
      function: "0x1::donor_voice_txs::is_rejected",
      functionArguments: [donor_voice_address, tx_id],
    },
  };
}

/**
 * Sugar for donorVoiceTxs_isScheduled
 * @param donor_voice_address address
 * @param tx_id u64
 * @returns ViewArgs
 */
export function donorVoiceTxs_isScheduled(donor_voice_address: string, tx_id: number): ViewArgs {
  return {
    payload: {
      function: "0x1::donor_voice_txs::is_scheduled",
      functionArguments: [donor_voice_address, tx_id],
    },
  };
}

/**
 * Sugar for donorVoiceTxs_isPaid
 * @param donor_voice_address address
 * @param tx_id u64
 * @returns ViewArgs
 */
export function donorVoiceTxs_isPaid(donor_voice_address: string, tx_id: number): ViewArgs {
  return {
    payload: {
      function: "0x1::donor_voice_txs::is_paid",
      functionArguments: [donor_voice_address, tx_id],
    },
  };
}

/**
 * Sugar for donorVoiceTxs_isVeto
 * @param directed_address address
 * @param tx_id u64
 * @returns ViewArgs
 */
export function donorVoiceTxs_isVeto(directed_address: string, tx_id: number): ViewArgs {
  return {
    payload: {
      function: "0x1::donor_voice_txs::is_veto",
      functionArguments: [directed_address, tx_id],
    },
  };
}

/**
 * Sugar for donorVoiceTxs_isAccountFrozen
 * @param addr address
 * @returns ViewArgs
 */
export function donorVoiceTxs_isAccountFrozen(addr: string): ViewArgs {
  return {
    payload: {
      function: "0x1::donor_voice_txs::is_account_frozen",
      functionArguments: [addr],
    },
  };
}

/**
 * Sugar for donorVoiceTxs_isLiquidateToMatchIndex
 * @param addr address
 * @returns ViewArgs
 */
export function donorVoiceTxs_isLiquidateToMatchIndex(addr: string): ViewArgs {
  return {
    payload: {
      function: "0x1::donor_voice_txs::is_liquidate_to_match_index",
      functionArguments: [addr],
    },
  };
}

/**
 * Sugar for donorVoiceTxs_getProRata
 * @param multisig_address address
 * @returns ViewArgs
 */
export function donorVoiceTxs_getProRata(multisig_address: string): ViewArgs {
  return {
    payload: {
      function: "0x1::donor_voice_txs::get_pro_rata",
      functionArguments: [multisig_address],
    },
  };
}

/**
 * Sugar for donorVoiceTxs_getDvSupply
 * @returns ViewArgs
 */
export function donorVoiceTxs_getDvSupply(): ViewArgs {
  return {
    payload: {
      function: "0x1::donor_voice_txs::get_dv_supply",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for donorVoiceTxs_listByStatus
 * @param donor_voice_address address
 * @param status_enum u8
 * @returns ViewArgs
 */
export function donorVoiceTxs_listByStatus(donor_voice_address: string, status_enum: number): ViewArgs {
  return {
    payload: {
      function: "0x1::donor_voice_txs::list_by_status",
      functionArguments: [donor_voice_address, status_enum],
    },
  };
}

/**
 * Sugar for communityWallet_isInit
 * @param addr address
 * @returns ViewArgs
 */
export function communityWallet_isInit(addr: string): ViewArgs {
  return {
    payload: {
      function: "0x1::community_wallet::is_init",
      functionArguments: [addr],
    },
  };
}

/**
 * Sugar for receipts_isInit
 * @param addr address
 * @returns ViewArgs
 */
export function receipts_isInit(addr: string): ViewArgs {
  return {
    payload: {
      function: "0x1::receipts::is_init",
      functionArguments: [addr],
    },
  };
}

/**
 * Sugar for infraEscrow_userInfraPledgeBalance
 * @param addr address
 * @returns ViewArgs
 */
export function infraEscrow_userInfraPledgeBalance(addr: string): ViewArgs {
  return {
    payload: {
      function: "0x1::infra_escrow::user_infra_pledge_balance",
      functionArguments: [addr],
    },
  };
}

/**
 * Sugar for infraEscrow_infraEscrowBalance
 * @returns ViewArgs
 */
export function infraEscrow_infraEscrowBalance(): ViewArgs {
  return {
    payload: {
      function: "0x1::infra_escrow::infra_escrow_balance",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for proofOfFee_getBidders
 * @param remove_unqualified bool
 * @returns ViewArgs
 */
export function proofOfFee_getBidders(remove_unqualified: boolean): ViewArgs {
  return {
    payload: {
      function: "0x1::proof_of_fee::get_bidders",
      functionArguments: [remove_unqualified],
    },
  };
}

/**
 * Sugar for proofOfFee_getBiddersAndBids
 * @param remove_unqualified bool
 * @returns ViewArgs
 */
export function proofOfFee_getBiddersAndBids(remove_unqualified: boolean): ViewArgs {
  return {
    payload: {
      function: "0x1::proof_of_fee::get_bidders_and_bids",
      functionArguments: [remove_unqualified],
    },
  };
}

/**
 * Sugar for proofOfFee_getValidVouchersInSet
 * @param incoming_addr address
 * @returns ViewArgs
 */
export function proofOfFee_getValidVouchersInSet(incoming_addr: string): ViewArgs {
  return {
    payload: {
      function: "0x1::proof_of_fee::get_valid_vouchers_in_set",
      functionArguments: [incoming_addr],
    },
  };
}

/**
 * Sugar for proofOfFee_calculateMinVouchesRequired
 * @param set_size u64
 * @returns ViewArgs
 */
export function proofOfFee_calculateMinVouchesRequired(set_size: number): ViewArgs {
  return {
    payload: {
      function: "0x1::proof_of_fee::calculate_min_vouches_required",
      functionArguments: [set_size],
    },
  };
}

/**
 * Sugar for proofOfFee_auditQualification
 * @param val address
 * @returns ViewArgs
 */
export function proofOfFee_auditQualification(val: string): ViewArgs {
  return {
    payload: {
      function: "0x1::proof_of_fee::audit_qualification",
      functionArguments: [val],
    },
  };
}

/**
 * Sugar for proofOfFee_getConsensusReward
 * @returns ViewArgs
 */
export function proofOfFee_getConsensusReward(): ViewArgs {
  return {
    payload: {
      function: "0x1::proof_of_fee::get_consensus_reward",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for proofOfFee_currentBid
 * @param node_addr address
 * @returns ViewArgs
 */
export function proofOfFee_currentBid(node_addr: string): ViewArgs {
  return {
    payload: {
      function: "0x1::proof_of_fee::current_bid",
      functionArguments: [node_addr],
    },
  };
}

/**
 * Sugar for proofOfFee_userNetReward
 * @param node_addr address
 * @returns ViewArgs
 */
export function proofOfFee_userNetReward(node_addr: string): ViewArgs {
  return {
    payload: {
      function: "0x1::proof_of_fee::user_net_reward",
      functionArguments: [node_addr],
    },
  };
}

/**
 * Sugar for proofOfFee_isAlreadyRetracted
 * @param node_addr address
 * @returns ViewArgs
 */
export function proofOfFee_isAlreadyRetracted(node_addr: string): ViewArgs {
  return {
    payload: {
      function: "0x1::proof_of_fee::is_already_retracted",
      functionArguments: [node_addr],
    },
  };
}

/**
 * Sugar for proofOfFee_queryRewardAdjustment
 * @returns ViewArgs
 */
export function proofOfFee_queryRewardAdjustment(): ViewArgs {
  return {
    payload: {
      function: "0x1::proof_of_fee::query_reward_adjustment",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for multiAction_isMultiAction
 * @param addr address
 * @returns ViewArgs
 */
export function multiAction_isMultiAction(addr: string): ViewArgs {
  return {
    payload: {
      function: "0x1::multi_action::is_multi_action",
      functionArguments: [addr],
    },
  };
}

/**
 * Sugar for multiAction_isGovInit
 * @param addr address
 * @returns ViewArgs
 */
export function multiAction_isGovInit(addr: string): ViewArgs {
  return {
    payload: {
      function: "0x1::multi_action::is_gov_init",
      functionArguments: [addr],
    },
  };
}

/**
 * Sugar for multiAction_existsOffer
 * @param multisig_address address
 * @returns ViewArgs
 */
export function multiAction_existsOffer(multisig_address: string): ViewArgs {
  return {
    payload: {
      function: "0x1::multi_action::exists_offer",
      functionArguments: [multisig_address],
    },
  };
}

/**
 * Sugar for multiAction_getOfferProposed
 * @param multisig_address address
 * @returns ViewArgs
 */
export function multiAction_getOfferProposed(multisig_address: string): ViewArgs {
  return {
    payload: {
      function: "0x1::multi_action::get_offer_proposed",
      functionArguments: [multisig_address],
    },
  };
}

/**
 * Sugar for multiAction_getOfferClaimed
 * @param multisig_address address
 * @returns ViewArgs
 */
export function multiAction_getOfferClaimed(multisig_address: string): ViewArgs {
  return {
    payload: {
      function: "0x1::multi_action::get_offer_claimed",
      functionArguments: [multisig_address],
    },
  };
}

/**
 * Sugar for multiAction_getOfferProposedNOfM
 * @param multisig_address address
 * @returns ViewArgs
 */
export function multiAction_getOfferProposedNOfM(multisig_address: string): ViewArgs {
  return {
    payload: {
      function: "0x1::multi_action::get_offer_proposed_n_of_m",
      functionArguments: [multisig_address],
    },
  };
}

/**
 * Sugar for multiAction_getAuthorities
 * @param multisig_address address
 * @returns ViewArgs
 */
export function multiAction_getAuthorities(multisig_address: string): ViewArgs {
  return {
    payload: {
      function: "0x1::multi_action::get_authorities",
      functionArguments: [multisig_address],
    },
  };
}

/**
 * Sugar for multiAction_isAuthority
 * @param multisig_addr address
 * @param addr address
 * @returns ViewArgs
 */
export function multiAction_isAuthority(multisig_addr: string, addr: string): ViewArgs {
  return {
    payload: {
      function: "0x1::multi_action::is_authority",
      functionArguments: [multisig_addr, addr],
    },
  };
}

/**
 * Sugar for multiAction_getThreshold
 * @param multisig_address address
 * @returns ViewArgs
 */
export function multiAction_getThreshold(multisig_address: string): ViewArgs {
  return {
    payload: {
      function: "0x1::multi_action::get_threshold",
      functionArguments: [multisig_address],
    },
  };
}

/**
 * Sugar for matchIndex_getAddressList
 * @returns ViewArgs
 */
export function matchIndex_getAddressList(): ViewArgs {
  return {
    payload: {
      function: "0x1::match_index::get_address_list",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for reauthorization_isV8Authorized
 * @param account address
 * @returns ViewArgs
 */
export function reauthorization_isV8Authorized(account: string): ViewArgs {
  return {
    payload: {
      function: "0x1::reauthorization::is_v8_authorized",
      functionArguments: [account],
    },
  };
}

/**
 * Sugar for diemAccount_canReceiveDirectCoinTransfers
 * @param account address
 * @returns ViewArgs
 */
export function diemAccount_canReceiveDirectCoinTransfers(account: string): ViewArgs {
  return {
    payload: {
      function: "0x1::diem_account::can_receive_direct_coin_transfers",
      functionArguments: [account],
    },
  };
}

/**
 * Sugar for resourceAccountTestOnly_isResourceAccount
 * @param addr address
 * @returns ViewArgs
 */
export function resourceAccountTestOnly_isResourceAccount(addr: string): ViewArgs {
  return {
    payload: {
      function: "0x1::resource_account_test_only::is_resource_account",
      functionArguments: [addr],
    },
  };
}

/**
 * Sugar for chainId_get
 * @returns ViewArgs
 */
export function chainId_get(): ViewArgs {
  return {
    payload: {
      function: "0x1::chain_id::get",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for timestamp_nowMicroseconds
 * @returns ViewArgs
 */
export function timestamp_nowMicroseconds(): ViewArgs {
  return {
    payload: {
      function: "0x1::timestamp::now_microseconds",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for timestamp_nowSeconds
 * @returns ViewArgs
 */
export function timestamp_nowSeconds(): ViewArgs {
  return {
    payload: {
      function: "0x1::timestamp::now_seconds",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for stake_getHighestNetProposer
 * @returns ViewArgs
 */
export function stake_getHighestNetProposer(): ViewArgs {
  return {
    payload: {
      function: "0x1::stake::get_highest_net_proposer",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for stake_getCurrentValidators
 * @returns ViewArgs
 */
export function stake_getCurrentValidators(): ViewArgs {
  return {
    payload: {
      function: "0x1::stake::get_current_validators",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for stake_isCurrentVal
 * @param addr address
 * @returns ViewArgs
 */
export function stake_isCurrentVal(addr: string): ViewArgs {
  return {
    payload: {
      function: "0x1::stake::is_current_val",
      functionArguments: [addr],
    },
  };
}

/**
 * Sugar for stake_getValidatorState
 * @param validator_address address
 * @returns ViewArgs
 */
export function stake_getValidatorState(validator_address: string): ViewArgs {
  return {
    payload: {
      function: "0x1::stake::get_validator_state",
      functionArguments: [validator_address],
    },
  };
}

/**
 * Sugar for stake_isValid
 * @param addr address
 * @returns ViewArgs
 */
export function stake_isValid(addr: string): ViewArgs {
  return {
    payload: {
      function: "0x1::stake::is_valid",
      functionArguments: [addr],
    },
  };
}

/**
 * Sugar for stake_getValidatorIndex
 * @param validator_address address
 * @returns ViewArgs
 */
export function stake_getValidatorIndex(validator_address: string): ViewArgs {
  return {
    payload: {
      function: "0x1::stake::get_validator_index",
      functionArguments: [validator_address],
    },
  };
}

/**
 * Sugar for stake_getCurrentEpochProposalCounts
 * @param validator_index u64
 * @returns ViewArgs
 */
export function stake_getCurrentEpochProposalCounts(validator_index: number): ViewArgs {
  return {
    payload: {
      function: "0x1::stake::get_current_epoch_proposal_counts",
      functionArguments: [validator_index],
    },
  };
}

/**
 * Sugar for stake_getValNetProposals
 * @param val address
 * @returns ViewArgs
 */
export function stake_getValNetProposals(val: string): ViewArgs {
  return {
    payload: {
      function: "0x1::stake::get_val_net_proposals",
      functionArguments: [val],
    },
  };
}

/**
 * Sugar for stake_getValidatorConfig
 * @param validator_address address
 * @returns ViewArgs
 */
export function stake_getValidatorConfig(validator_address: string): ViewArgs {
  return {
    payload: {
      function: "0x1::stake::get_validator_config",
      functionArguments: [validator_address],
    },
  };
}

/**
 * Sugar for stake_stakePoolExists
 * @param addr address
 * @returns ViewArgs
 */
export function stake_stakePoolExists(addr: string): ViewArgs {
  return {
    payload: {
      function: "0x1::stake::stake_pool_exists",
      functionArguments: [addr],
    },
  };
}

/**
 * Sugar for block_getEpochIntervalSecs
 * @returns ViewArgs
 */
export function block_getEpochIntervalSecs(): ViewArgs {
  return {
    payload: {
      function: "0x1::block::get_epoch_interval_secs",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for block_getCurrentBlockHeight
 * @returns ViewArgs
 */
export function block_getCurrentBlockHeight(): ViewArgs {
  return {
    payload: {
      function: "0x1::block::get_current_block_height",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for code_getModuleNamesForPackageIndex
 * @param addr address
 * @param idx u64
 * @returns ViewArgs
 */
export function code_getModuleNamesForPackageIndex(addr: string, idx: number): ViewArgs {
  return {
    payload: {
      function: "0x1::code::get_module_names_for_package_index",
      functionArguments: [addr, idx],
    },
  };
}

/**
 * Sugar for version_getGitHash
 * @returns ViewArgs
 */
export function version_getGitHash(): ViewArgs {
  return {
    payload: {
      function: "0x1::version::get_git_hash",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for chainStatus_isGenesis
 * @returns ViewArgs
 */
export function chainStatus_isGenesis(): ViewArgs {
  return {
    payload: {
      function: "0x1::chain_status::is_genesis",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for chainStatus_isOperating
 * @returns ViewArgs
 */
export function chainStatus_isOperating(): ViewArgs {
  return {
    payload: {
      function: "0x1::chain_status::is_operating",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for multisigAccount_isMultisig
 * @param multisig_account address
 * @returns ViewArgs
 */
export function multisigAccount_isMultisig(multisig_account: string): ViewArgs {
  return {
    payload: {
      function: "0x1::multisig_account::is_multisig",
      functionArguments: [multisig_account],
    },
  };
}

/**
 * Sugar for multisigAccount_metadata
 * @param multisig_account address
 * @returns ViewArgs
 */
export function multisigAccount_metadata(multisig_account: string): ViewArgs {
  return {
    payload: {
      function: "0x1::multisig_account::metadata",
      functionArguments: [multisig_account],
    },
  };
}

/**
 * Sugar for multisigAccount_numSignaturesRequired
 * @param multisig_account address
 * @returns ViewArgs
 */
export function multisigAccount_numSignaturesRequired(multisig_account: string): ViewArgs {
  return {
    payload: {
      function: "0x1::multisig_account::num_signatures_required",
      functionArguments: [multisig_account],
    },
  };
}

/**
 * Sugar for multisigAccount_owners
 * @param multisig_account address
 * @returns ViewArgs
 */
export function multisigAccount_owners(multisig_account: string): ViewArgs {
  return {
    payload: {
      function: "0x1::multisig_account::owners",
      functionArguments: [multisig_account],
    },
  };
}

/**
 * Sugar for multisigAccount_getPendingTransactions
 * @param multisig_account address
 * @returns ViewArgs
 */
export function multisigAccount_getPendingTransactions(multisig_account: string): ViewArgs {
  return {
    payload: {
      function: "0x1::multisig_account::get_pending_transactions",
      functionArguments: [multisig_account],
    },
  };
}

/**
 * Sugar for multisigAccount_getNextMultisigAccountAddress
 * @param creator address
 * @returns ViewArgs
 */
export function multisigAccount_getNextMultisigAccountAddress(creator: string): ViewArgs {
  return {
    payload: {
      function: "0x1::multisig_account::get_next_multisig_account_address",
      functionArguments: [creator],
    },
  };
}

/**
 * Sugar for multisigAccount_lastResolvedSequenceNumber
 * @param multisig_account address
 * @returns ViewArgs
 */
export function multisigAccount_lastResolvedSequenceNumber(multisig_account: string): ViewArgs {
  return {
    payload: {
      function: "0x1::multisig_account::last_resolved_sequence_number",
      functionArguments: [multisig_account],
    },
  };
}

/**
 * Sugar for multisigAccount_nextSequenceNumber
 * @param multisig_account address
 * @returns ViewArgs
 */
export function multisigAccount_nextSequenceNumber(multisig_account: string): ViewArgs {
  return {
    payload: {
      function: "0x1::multisig_account::next_sequence_number",
      functionArguments: [multisig_account],
    },
  };
}

/**
 * Sugar for diemGovernance_getVotingDurationSecs
 * @returns ViewArgs
 */
export function diemGovernance_getVotingDurationSecs(): ViewArgs {
  return {
    payload: {
      function: "0x1::diem_governance::get_voting_duration_secs",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for diemGovernance_getMinVotingThreshold
 * @returns ViewArgs
 */
export function diemGovernance_getMinVotingThreshold(): ViewArgs {
  return {
    payload: {
      function: "0x1::diem_governance::get_min_voting_threshold",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for diemGovernance_isResolved
 * @param proposal_id u64
 * @returns ViewArgs
 */
export function diemGovernance_isResolved(proposal_id: number): ViewArgs {
  return {
    payload: {
      function: "0x1::diem_governance::is_resolved",
      functionArguments: [proposal_id],
    },
  };
}

/**
 * Sugar for diemGovernance_getVotes
 * @param proposal_id u64
 * @returns ViewArgs
 */
export function diemGovernance_getVotes(proposal_id: number): ViewArgs {
  return {
    payload: {
      function: "0x1::diem_governance::get_votes",
      functionArguments: [proposal_id],
    },
  };
}

/**
 * Sugar for diemGovernance_getProposalState
 * @param proposal_id u64
 * @returns ViewArgs
 */
export function diemGovernance_getProposalState(proposal_id: number): ViewArgs {
  return {
    payload: {
      function: "0x1::diem_governance::get_proposal_state",
      functionArguments: [proposal_id],
    },
  };
}

/**
 * Sugar for diemGovernance_getCanResolve
 * @param proposal_id u64
 * @returns ViewArgs
 */
export function diemGovernance_getCanResolve(proposal_id: number): ViewArgs {
  return {
    payload: {
      function: "0x1::diem_governance::get_can_resolve",
      functionArguments: [proposal_id],
    },
  };
}

/**
 * Sugar for diemGovernance_getApprovedHash
 * @param proposal_id u64
 * @returns ViewArgs
 */
export function diemGovernance_getApprovedHash(proposal_id: number): ViewArgs {
  return {
    payload: {
      function: "0x1::diem_governance::get_approved_hash",
      functionArguments: [proposal_id],
    },
  };
}

/**
 * Sugar for diemGovernance_getNextGovernanceProposalId
 * @returns ViewArgs
 */
export function diemGovernance_getNextGovernanceProposalId(): ViewArgs {
  return {
    payload: {
      function: "0x1::diem_governance::get_next_governance_proposal_id",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for randomness_isInit
 * @returns ViewArgs
 */
export function randomness_isInit(): ViewArgs {
  return {
    payload: {
      function: "0x1::randomness::is_init",
      functionArguments: [],
    },
  };
}

/**
 * Sugar for fungibleAsset_storeExists
 * @param store address
 * @returns ViewArgs
 */
export function fungibleAsset_storeExists(store: string): ViewArgs {
  return {
    payload: {
      function: "0x1::fungible_asset::store_exists",
      functionArguments: [store],
    },
  };
}

/**
 * Sugar for features_isEnabled
 * @param feature u64
 * @returns ViewArgs
 */
export function features_isEnabled(feature: number): ViewArgs {
  return {
    payload: {
      function: "0x1::features::is_enabled",
      functionArguments: [feature],
    },
  };
}

/**
 * Sugar for resourceAccount_isResourceAccount
 * @param addr address
 * @returns ViewArgs
 */
export function resourceAccount_isResourceAccount(addr: string): ViewArgs {
  return {
    payload: {
      function: "0x1::resource_account::is_resource_account",
      functionArguments: [addr],
    },
  };
}
